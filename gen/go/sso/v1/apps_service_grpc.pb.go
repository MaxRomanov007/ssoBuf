// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sso/v1/apps_service.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppsService_App_FullMethodName          = "/sso.v1.AppsService/App"
	AppsService_AppByName_FullMethodName    = "/sso.v1.AppsService/AppByName"
	AppsService_AddApp_FullMethodName       = "/sso.v1.AppsService/AddApp"
	AppsService_RemoveApp_FullMethodName    = "/sso.v1.AppsService/RemoveApp"
	AppsService_Apps_FullMethodName         = "/sso.v1.AppsService/Apps"
	AppsService_ChangeSecret_FullMethodName = "/sso.v1.AppsService/ChangeSecret"
)

// AppsServiceClient is the client API for AppsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsServiceClient interface {
	App(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error)
	AppByName(ctx context.Context, in *AppByNameRequest, opts ...grpc.CallOption) (*AppByNameResponse, error)
	AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error)
	RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error)
	Apps(ctx context.Context, in *AppsRequest, opts ...grpc.CallOption) (*AppsResponse, error)
	ChangeSecret(ctx context.Context, in *ChangeSecretRequest, opts ...grpc.CallOption) (*ChangeSecretResponse, error)
}

type appsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsServiceClient(cc grpc.ClientConnInterface) AppsServiceClient {
	return &appsServiceClient{cc}
}

func (c *appsServiceClient) App(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, AppsService_App_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) AppByName(ctx context.Context, in *AppByNameRequest, opts ...grpc.CallOption) (*AppByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppByNameResponse)
	err := c.cc.Invoke(ctx, AppsService_AppByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAppResponse)
	err := c.cc.Invoke(ctx, AppsService_AddApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) RemoveApp(ctx context.Context, in *RemoveAppRequest, opts ...grpc.CallOption) (*RemoveAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAppResponse)
	err := c.cc.Invoke(ctx, AppsService_RemoveApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Apps(ctx context.Context, in *AppsRequest, opts ...grpc.CallOption) (*AppsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppsResponse)
	err := c.cc.Invoke(ctx, AppsService_Apps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) ChangeSecret(ctx context.Context, in *ChangeSecretRequest, opts ...grpc.CallOption) (*ChangeSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeSecretResponse)
	err := c.cc.Invoke(ctx, AppsService_ChangeSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsServiceServer is the server API for AppsService service.
// All implementations must embed UnimplementedAppsServiceServer
// for forward compatibility.
type AppsServiceServer interface {
	App(context.Context, *AppRequest) (*AppResponse, error)
	AppByName(context.Context, *AppByNameRequest) (*AppByNameResponse, error)
	AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error)
	RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error)
	Apps(context.Context, *AppsRequest) (*AppsResponse, error)
	ChangeSecret(context.Context, *ChangeSecretRequest) (*ChangeSecretResponse, error)
	mustEmbedUnimplementedAppsServiceServer()
}

// UnimplementedAppsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppsServiceServer struct{}

func (UnimplementedAppsServiceServer) App(context.Context, *AppRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method App not implemented")
}
func (UnimplementedAppsServiceServer) AppByName(context.Context, *AppByNameRequest) (*AppByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppByName not implemented")
}
func (UnimplementedAppsServiceServer) AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApp not implemented")
}
func (UnimplementedAppsServiceServer) RemoveApp(context.Context, *RemoveAppRequest) (*RemoveAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApp not implemented")
}
func (UnimplementedAppsServiceServer) Apps(context.Context, *AppsRequest) (*AppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apps not implemented")
}
func (UnimplementedAppsServiceServer) ChangeSecret(context.Context, *ChangeSecretRequest) (*ChangeSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSecret not implemented")
}
func (UnimplementedAppsServiceServer) mustEmbedUnimplementedAppsServiceServer() {}
func (UnimplementedAppsServiceServer) testEmbeddedByValue()                     {}

// UnsafeAppsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsServiceServer will
// result in compilation errors.
type UnsafeAppsServiceServer interface {
	mustEmbedUnimplementedAppsServiceServer()
}

func RegisterAppsServiceServer(s grpc.ServiceRegistrar, srv AppsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppsService_ServiceDesc, srv)
}

func _AppsService_App_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).App(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_App_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).App(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_AppByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).AppByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_AppByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).AppByName(ctx, req.(*AppByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_AddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).AddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_AddApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).AddApp(ctx, req.(*AddAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_RemoveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).RemoveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_RemoveApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).RemoveApp(ctx, req.(*RemoveAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Apps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Apps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Apps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Apps(ctx, req.(*AppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_ChangeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).ChangeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_ChangeSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).ChangeSecret(ctx, req.(*ChangeSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppsService_ServiceDesc is the grpc.ServiceDesc for AppsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1.AppsService",
	HandlerType: (*AppsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "App",
			Handler:    _AppsService_App_Handler,
		},
		{
			MethodName: "AppByName",
			Handler:    _AppsService_AppByName_Handler,
		},
		{
			MethodName: "AddApp",
			Handler:    _AppsService_AddApp_Handler,
		},
		{
			MethodName: "RemoveApp",
			Handler:    _AppsService_RemoveApp_Handler,
		},
		{
			MethodName: "Apps",
			Handler:    _AppsService_Apps_Handler,
		},
		{
			MethodName: "ChangeSecret",
			Handler:    _AppsService_ChangeSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1/apps_service.proto",
}
